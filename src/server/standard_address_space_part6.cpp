
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include "standard_address_space_parts.h"
#include <opc/ua/protocol/string_utils.h>
#include <opc/common/addons_core/addon.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/services/node_management.h>

#include <algorithm>
#include <iostream>
#include <map>

namespace OpcUa
{
    static void create_11436(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11436");
        node.BrowseName = ToQualifiedName("ProgressEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgressEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2340(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2340");
        node.BrowseName = ToQualifiedName("AggregateFunctionType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateFunctionType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2137(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2137");
        node.BrowseName = ToQualifiedName("ServerVendorCapabilityType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerVendorCapabilityType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2138(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2138");
        node.BrowseName = ToQualifiedName("ServerStatusType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusType");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2138");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2139");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2138");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2140");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2138");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2141");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2138");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2142");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2138");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2752");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2138");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2753");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2139(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2139");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2139");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2140(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2140");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2140");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2141(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2141");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2141");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2142(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2142");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3698");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3699");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3700");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3701");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3702");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3703");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2142");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3698(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3698");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3698");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3699(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3699");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3699");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3700(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3700");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3700");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3701(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3701");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3701");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3702(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3702");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3702");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3703(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3703");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3703");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2752(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2752");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2752");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2753(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2753");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2753");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3051(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3051");
        node.BrowseName = ToQualifiedName("BuildInfoType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfoType");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3051");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3052");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3051");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3053");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3051");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3054");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3051");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3055");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3051");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3056");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3051");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3057");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3052(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3052");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3052");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3053(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3053");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3053");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3054(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3054");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3054");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3055(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3055");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3055");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3056(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3056");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3056");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3057(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3057");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3057");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2150(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2150");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryType");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2151");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2152");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2153");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2154");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2155");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2156");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2157");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2159");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2160");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2161");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2162");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2150");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2163");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2151(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2151");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2151");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2152(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2152");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2152");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2153(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2153");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2153");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2154(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2154");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2154");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2155(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2155");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2155");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2156(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2156");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2156");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2157(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2157");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2157");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2159(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2159");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2159");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2160(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2160");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2160");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2161(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2161");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2161");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2162(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2162");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2162");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2163(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2163");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2163");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2164(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2164");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2165(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2165");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsType");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2165");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2166");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2165");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11697");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2165");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11698");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2165");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11699");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2166(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2166");
        node.BrowseName = ToQualifiedName("SamplingInterval");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingInterval");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2166");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11697(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11697");
        node.BrowseName = ToQualifiedName("SampledMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SampledMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11697");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11698(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11698");
        node.BrowseName = ToQualifiedName("MaxSampledMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxSampledMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11698");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11699(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11699");
        node.BrowseName = ToQualifiedName("DisabledMonitoredItemsSamplingCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisabledMonitoredItemsSamplingCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11699");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2171(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2171");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2172(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2172");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsType");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2173");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2174");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2175");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2176");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2177");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8888");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2179");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2180");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2181");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2182");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2183");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2184");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2185");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2186");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2187");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2188");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2189");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2190");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2191");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2998");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2193");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8889");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8890");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8891");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8892");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8893");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8894");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8895");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8896");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8897");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2172");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8902");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2173(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2173");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2173");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2174(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2174");
        node.BrowseName = ToQualifiedName("SubscriptionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionId");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2174");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2175(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2175");
        node.BrowseName = ToQualifiedName("Priority");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Priority");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2175");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2176(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2176");
        node.BrowseName = ToQualifiedName("PublishingInterval");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingInterval");
        attrs.Type = ObjectId::Double;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2176");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2177(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2177");
        node.BrowseName = ToQualifiedName("MaxKeepAliveCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxKeepAliveCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2177");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8888(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8888");
        node.BrowseName = ToQualifiedName("MaxLifetimeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxLifetimeCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8888");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2179(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2179");
        node.BrowseName = ToQualifiedName("MaxNotificationsPerPublish");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxNotificationsPerPublish");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2179");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2180(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2180");
        node.BrowseName = ToQualifiedName("PublishingEnabled");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingEnabled");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2180");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2181(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2181");
        node.BrowseName = ToQualifiedName("ModifyCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2181");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2182(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2182");
        node.BrowseName = ToQualifiedName("EnableCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnableCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2182");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2183(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2183");
        node.BrowseName = ToQualifiedName("DisableCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisableCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2183");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2184(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2184");
        node.BrowseName = ToQualifiedName("RepublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2184");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2185(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2185");
        node.BrowseName = ToQualifiedName("RepublishMessageRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishMessageRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2185");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2186(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2186");
        node.BrowseName = ToQualifiedName("RepublishMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2186");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2187(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2187");
        node.BrowseName = ToQualifiedName("TransferRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2187");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2188(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2188");
        node.BrowseName = ToQualifiedName("TransferredToAltClientCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferredToAltClientCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2188");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2189(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2189");
        node.BrowseName = ToQualifiedName("TransferredToSameClientCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferredToSameClientCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2189");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2190(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2190");
        node.BrowseName = ToQualifiedName("PublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2190");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2191(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2191");
        node.BrowseName = ToQualifiedName("DataChangeNotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DataChangeNotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2191");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2998(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2998");
        node.BrowseName = ToQualifiedName("EventNotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventNotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2998");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2193(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2193");
        node.BrowseName = ToQualifiedName("NotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2193");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8889(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8889");
        node.BrowseName = ToQualifiedName("LatePublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LatePublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8889");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8890(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8890");
        node.BrowseName = ToQualifiedName("CurrentKeepAliveCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentKeepAliveCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8890");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8891(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8891");
        node.BrowseName = ToQualifiedName("CurrentLifetimeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentLifetimeCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8891");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8892(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8892");
        node.BrowseName = ToQualifiedName("UnacknowledgedMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnacknowledgedMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8892");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8893(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8893");
        node.BrowseName = ToQualifiedName("DiscardedMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DiscardedMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8893");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8894(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8894");
        node.BrowseName = ToQualifiedName("MonitoredItemCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoredItemCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8894");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8895(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8895");
        node.BrowseName = ToQualifiedName("DisabledMonitoredItemCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisabledMonitoredItemCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8895");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8896(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8896");
        node.BrowseName = ToQualifiedName("MonitoringQueueOverflowCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringQueueOverflowCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8896");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8897(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8897");
        node.BrowseName = ToQualifiedName("NextSequenceNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NextSequenceNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8897");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8902(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=8902");
  node.BrowseName = ToQualifiedName("EventQueueOverFlowCount");
  node.Class = NodeClass::Variable;
  node.ParentNodeId = ToNodeId("i=2172");
  node.ReferenceTypeId = ReferenceId::HasComponent;
  node.TypeDefinition = ToNodeId("i=63");
  VariableAttributes attrs;
  attrs.DisplayName = LocalizedText("EventQueueOverFlowCount");
  attrs.Type = ObjectId::UInt32;
  attrs.Rank = -1;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
  std::vector<AddReferencesItem> refs;
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasModellingRule;
    ref.SourceNodeId = ToNodeId("i=8902");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=78");
    refs.push_back(ref);
  }
  registry.AddReferences(refs);
}

    static void create_2196(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2196");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2197(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2197");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsVariableType");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2198");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2199");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2200");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2201");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2202");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2203");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2204");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3050");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2205");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2206");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2207");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2208");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2209");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8900");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11892");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2217");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2218");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2219");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2220");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2221");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2222");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2223");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2224");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2225");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2226");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2227");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2228");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2229");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2230");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2231");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2232");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2233");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2234");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2235");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2236");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2237");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2238");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2239");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2240");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2241");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2242");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2730");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2197");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2731");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2198(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2198");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2198");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2199(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2199");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2199");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2200(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2200");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2200");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2201(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2201");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2201");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2202(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2202");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2202");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2203(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2203");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2203");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2204(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2204");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2204");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3050(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3050");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3050");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2205(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2205");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2205");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2206(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2206");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2206");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2207(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2207");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2207");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2208(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2208");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2208");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2209(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2209");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2209");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8900(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8900");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=8900");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11892(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11892");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11892");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2217(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2217");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2217");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2218(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2218");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2218");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2219(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2219");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2219");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2220(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2220");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2220");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2221(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2221");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2221");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2222(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2222");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2222");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2223(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2223");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2223");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2224(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2224");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2224");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2225(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2225");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2225");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2226(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2226");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2226");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2227(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2227");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2227");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2228(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2228");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2228");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2229(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2229");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2229");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2230(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2230");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2230");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2231(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2231");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2231");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2232(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2232");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2232");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2233(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2233");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2233");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2234(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2234");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2234");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2235(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2235");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2235");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2236(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2236");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2236");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2237(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2237");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2237");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2238(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2238");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2238");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2239(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2239");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2239");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2240(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2240");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2240");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2241(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2241");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2241");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2242(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2242");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2242");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2730(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2730");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2730");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2731(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2731");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2731");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2243(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2243");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2244(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2244");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsType");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2245");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2246");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2247");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2248");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2249");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2250");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2251");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2252");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2244");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3058");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2245(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2245");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2245");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2246(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2246");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2246");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2247(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2247");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2247");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2248(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2248");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2248");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2249(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2249");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2249");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2250(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2250");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2250");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2251(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2251");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2251");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2252(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2252");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3058(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3058");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3058");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11487(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11487");
        node.BrowseName = ToQualifiedName("OptionSetType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("OptionSetType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11487");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11488");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11487");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11701");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11488(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11488");
        node.BrowseName = ToQualifiedName("OptionSetValues");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11487");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OptionSetValues");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11488");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11701(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11701");
        node.BrowseName = ToQualifiedName("BitMask");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11487");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BitMask");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11701");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3048(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3048");
        node.BrowseName = ToQualifiedName("EventTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("EventTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::Organizes;
            ref.SourceNodeId = ToNodeId("i=3048");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2041");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2253(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2253");
        node.BrowseName = ToQualifiedName("Server");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=85");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=2004");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Server");
        attrs.EventNotifier = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2254");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2255");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2256");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2267");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2994");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2268");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2274");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2295");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2296");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11715");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2253");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11492");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2254(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2254");
        node.BrowseName = ToQualifiedName("ServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of server URIs used by the server.");
        attrs.DisplayName = LocalizedText("ServerArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2255(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2255");
        node.BrowseName = ToQualifiedName("NamespaceArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of namespace URIs used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2256(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2256");
        node.BrowseName = ToQualifiedName("ServerStatus");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2138");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current status of the server.");
        attrs.DisplayName = LocalizedText("ServerStatus");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2256");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2257");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2256");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2258");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2256");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2259");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2256");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2260");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2256");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2992");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2256");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2993");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2257(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2257");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2258(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2258");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2259(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2259");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2260(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2260");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2260");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2262");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2260");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2263");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2260");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2261");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2260");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2264");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2260");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2265");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2260");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2266");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2262(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2262");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2263(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2263");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2261(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2261");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2264(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2264");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2265(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2265");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2266(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2266");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2992(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2992");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2993(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2993");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2267(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2267");
        node.BrowseName = ToQualifiedName("ServiceLevel");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A value indicating the level of service the server can provide. 255 indicates the best.");
        attrs.DisplayName = LocalizedText("ServiceLevel");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2994(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2994");
        node.BrowseName = ToQualifiedName("Auditing");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A flag indicating whether the server is currently generating audit events.");
        attrs.DisplayName = LocalizedText("Auditing");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2268(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2268");
        node.BrowseName = ToQualifiedName("ServerCapabilities");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2013");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilities");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2269");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2271");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2272");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2735");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2736");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2737");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3704");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11702");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11703");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11704");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2996");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2268");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2997");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2269(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2269");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2271(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2271");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2272(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2272");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2735(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2735");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2736(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2736");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2737(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2737");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_3704(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3704");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11702(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11702");
        node.BrowseName = ToQualifiedName("MaxArrayLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for an array value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxArrayLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11703(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11703");
        node.BrowseName = ToQualifiedName("MaxStringLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for a string value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxStringLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11704(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11704");
        node.BrowseName = ToQualifiedName("OperationLimits");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11564");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Defines the limits supported by the server for different operations.");
        attrs.DisplayName = LocalizedText("OperationLimits");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11705");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12165");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12166");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11707");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12167");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12168");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11709");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11710");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11711");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11712");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11713");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=11704");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11714");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11705(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11705");
        node.BrowseName = ToQualifiedName("MaxNodesPerRead");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Read request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRead");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12165(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12165");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12166(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12166");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11707(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11707");
        node.BrowseName = ToQualifiedName("MaxNodesPerWrite");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Write request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerWrite");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12167(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12167");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12168(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12168");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11709(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11709");
        node.BrowseName = ToQualifiedName("MaxNodesPerMethodCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Call request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerMethodCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11710(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11710");
        node.BrowseName = ToQualifiedName("MaxNodesPerBrowse");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Browse request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerBrowse");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11711(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11711");
        node.BrowseName = ToQualifiedName("MaxNodesPerRegisterNodes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single RegisterNodes request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRegisterNodes");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11712(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11712");
        node.BrowseName = ToQualifiedName("MaxNodesPerTranslateBrowsePathsToNodeIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerTranslateBrowsePathsToNodeIds");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11713(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11713");
        node.BrowseName = ToQualifiedName("MaxNodesPerNodeManagement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerNodeManagement");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11714(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11714");
        node.BrowseName = ToQualifiedName("MaxMonitoredItemsPerCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single MonitoredItem related request.");
        attrs.DisplayName = LocalizedText("MaxMonitoredItemsPerCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2996(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2996");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2997(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2997");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2274(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2274");
        node.BrowseName = ToQualifiedName("ServerDiagnostics");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2020");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Reports diagnostics about the server.");
        attrs.DisplayName = LocalizedText("ServerDiagnostics");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2274");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2275");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2274");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2289");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2274");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2290");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2274");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3706");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2274");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2294");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2275(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2275");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2276");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2277");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2278");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2279");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3705");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2281");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2282");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2284");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2285");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2286");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2287");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2275");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2288");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2276(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2276");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2277(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2277");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2278(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2278");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2279(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2279");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_3705(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3705");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2281(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2281");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2282(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2282");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2284(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2284");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2285(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2285");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2286(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2286");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2287(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2287");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2288(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2288");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2289(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2289");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2164");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArray");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2290(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2290");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_3706(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3706");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3706");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3707");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=3706");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3708");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3707(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3707");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3706");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_3708(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3708");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3706");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2294(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2294");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel)3;
        attrs.UserAccessLevel = (VariableAccessLevel)3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2295(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2295");
        node.BrowseName = ToQualifiedName("VendorServerInfo");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2033");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Server information provided by the vendor.");
        attrs.DisplayName = LocalizedText("VendorServerInfo");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2296(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2296");
        node.BrowseName = ToQualifiedName("ServerRedundancy");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2034");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the redundancy capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerRedundancy");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2296");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3709");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2296");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11312");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2296");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11313");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2296");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11314");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3709(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3709");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11312(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11312");
        node.BrowseName = ToQualifiedName("CurrentServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11313(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11313");
        node.BrowseName = ToQualifiedName("RedundantServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerArray");
        attrs.Type = ToNodeId("i=853");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11314(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11314");
        node.BrowseName = ToQualifiedName("ServerUriArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUriArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11715(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11715");
        node.BrowseName = ToQualifiedName("Namespaces");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11645");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the namespaces supported by the server.");
        attrs.DisplayName = LocalizedText("Namespaces");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11493(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11493");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11492");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11494(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11494");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11492");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11737(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11737");
        node.BrowseName = ToQualifiedName("BitFieldMaskDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=9");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("A mask of 32 bits that can be updated individually by using the top 32 bits as a mask.");
        attrs.DisplayName = LocalizedText("BitFieldMaskDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2299(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2299");
        node.BrowseName = ToQualifiedName("StateMachineType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateMachineType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2299");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2769");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2299");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2770");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2769(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2769");
        node.BrowseName = ToQualifiedName("CurrentState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2769");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3720");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2769");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3720(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3720");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2769");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3720");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2770(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2770");
        node.BrowseName = ToQualifiedName("LastTransition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2762");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LastTransition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2770");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3724");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2770");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3724(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3724");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2770");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3724");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2755(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2755");
        node.BrowseName = ToQualifiedName("StateVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2755");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2756");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2755");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2757");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2755");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2758");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2755");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2759");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2756(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2756");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2756");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2757(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2757");
        node.BrowseName = ToQualifiedName("Name");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Name");
        attrs.Type = ObjectId::QualifiedName;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2757");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2758(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2758");
        node.BrowseName = ToQualifiedName("Number");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Number");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2758");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2759(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2759");
        node.BrowseName = ToQualifiedName("EffectiveDisplayName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EffectiveDisplayName");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2759");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2762(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2762");
        node.BrowseName = ToQualifiedName("TransitionVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2762");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2763");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2762");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2764");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2762");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2765");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2762");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2766");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2762");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11456");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2763(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2763");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2763");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2764(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2764");
        node.BrowseName = ToQualifiedName("Name");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Name");
        attrs.Type = ObjectId::QualifiedName;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2764");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2765(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2765");
        node.BrowseName = ToQualifiedName("Number");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Number");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2765");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2766(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2766");
        node.BrowseName = ToQualifiedName("TransitionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2766");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11456(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11456");
        node.BrowseName = ToQualifiedName("EffectiveTransitionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EffectiveTransitionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=11456");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2771(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2771");
        node.BrowseName = ToQualifiedName("FiniteStateMachineType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteStateMachineType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2771");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2772");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2771");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2773");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2772(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2772");
        node.BrowseName = ToQualifiedName("CurrentState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2771");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2760");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2772");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3728");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2772");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3728(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3728");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2772");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3728");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2773(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2773");
        node.BrowseName = ToQualifiedName("LastTransition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2771");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2767");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LastTransition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2773");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3732");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2773");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=80");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3732(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3732");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2773");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3732");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2760(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2760");
        node.BrowseName = ToQualifiedName("FiniteStateVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteStateVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2760");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2761");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2761(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2761");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2760");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2761");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2767(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2767");
        node.BrowseName = ToQualifiedName("FiniteTransitionVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteTransitionVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2767");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2768");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2768(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2768");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2767");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2768");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2307(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2307");
        node.BrowseName = ToQualifiedName("StateType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2307");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2308");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2308(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2308");
        node.BrowseName = ToQualifiedName("StateNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2307");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StateNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2308");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2309(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2309");
        node.BrowseName = ToQualifiedName("InitialStateType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2307");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("InitialStateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_2310(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2310");
        node.BrowseName = ToQualifiedName("TransitionType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2310");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2312");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2312(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2312");
        node.BrowseName = ToQualifiedName("TransitionNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2310");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2312");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2311(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2311");
        node.BrowseName = ToQualifiedName("TransitionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionEventType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2311");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2774");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2311");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2775");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=2311");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2776");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2774(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2774");
        node.BrowseName = ToQualifiedName("Transition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2762");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Transition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2774");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3754");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2774");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3754(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3754");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2774");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3754");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2775(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2775");
        node.BrowseName = ToQualifiedName("FromState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FromState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2775");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3746");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2775");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3746(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3746");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2775");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3746");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2776(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2776");
        node.BrowseName = ToQualifiedName("ToState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ToState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2776");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=3750");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2776");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_3750(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3750");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2776");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=3750");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2315(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2315");
        node.BrowseName = ToQualifiedName("AuditUpdateStateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateStateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2315");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2777");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=2315");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=2778");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2777(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2777");
        node.BrowseName = ToQualifiedName("OldStateId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2315");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OldStateId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2777");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_2778(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2778");
        node.BrowseName = ToQualifiedName("NewStateId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2315");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NewStateId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=2778");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_338(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=338");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_851(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=851");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=851");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7611");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_7611(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7611");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=851");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=7611");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_852(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=852");
        node.BrowseName = ToQualifiedName("ServerState");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerState");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=852");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7612");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_7612(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7612");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=852");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasModellingRule;
            ref.SourceNodeId = ToNodeId("i=7612");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=78");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_853(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=853");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11943(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11943");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11944(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11944");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_856(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=856");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_859(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=859");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_862(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=862");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_865(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=865");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_868(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=868");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_871(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=871");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_299(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=299");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_874(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=874");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_877(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=877");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_897(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=897");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_339(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=339");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=338");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=339");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8327");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_854(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=854");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=853");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=854");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8843");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11949(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11949");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11943");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=11949");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11951");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11950(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11950");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11944");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=11950");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11954");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_857(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=857");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=856");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=857");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8846");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_860(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=860");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=859");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=860");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8849");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_863(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=863");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=862");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=863");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8852");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_866(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=866");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=865");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=866");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8855");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_869(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=869");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=868");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=869");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8858");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_872(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=872");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=871");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=872");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8861");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_300(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=300");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=299");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=300");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8294");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_875(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=875");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=874");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=875");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8864");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_878(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=878");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=877");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=878");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8867");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_898(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=898");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=897");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=898");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8870");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8252(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8252");
        node.BrowseName = ToQualifiedName("Opc.Ua");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=92");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=72");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Opc.Ua");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8254");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8285");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8291");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8918");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8300");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8297");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8303");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8417");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8333");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8306");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8309");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8312");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8315");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8318");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8363");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8366");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8369");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8372");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8321");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8324");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8330");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8564");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8567");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8570");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8573");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8576");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8579");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8582");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8639");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8702");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8708");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8711");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8807");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8384");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8387");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8390");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8327");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8843");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11951");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11954");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8846");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8849");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8852");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8855");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8858");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8861");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8294");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8864");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8867");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8870");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8873");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8876");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12175");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12178");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12083");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12086");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8882");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=8252");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8879");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_8254(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8254");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Value = +"http://opcfoundation.org/UA/2008/02/Types.xsd";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8285(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8285");
        node.BrowseName = ToQualifiedName("Argument");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Argument");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='Argument']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8291(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8291");
        node.BrowseName = ToQualifiedName("EnumValueType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValueType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EnumValueType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8918(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8918");
        node.BrowseName = ToQualifiedName("TimeZoneDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TimeZoneDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='TimeZoneDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8300(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8300");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ApplicationDescription']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8297(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8297");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='UserTokenPolicy']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8303(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8303");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EndpointDescription']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8417(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8417");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='RegisteredServer']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8333(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8333");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SignedSoftwareCertificate']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8306(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8306");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='UserIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8309(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8309");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AnonymousIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8312(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8312");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='UserNameIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8315(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8315");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='X509IdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8318(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8318");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='IssuedIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8363(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8363");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AddNodesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8366(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8366");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AddReferencesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8369(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8369");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='DeleteNodesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8372(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8372");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='DeleteReferencesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8321(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8321");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EndpointConfiguration']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8324(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8324");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SupportedProfile']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8330(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8330");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SoftwareCertificate']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8564(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8564");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ContentFilterElement']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8567(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8567");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ContentFilter']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8570(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8570");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='FilterOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8573(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8573");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ElementOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8576(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8576");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='LiteralOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8579(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8579");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AttributeOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8582(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8582");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SimpleAttributeOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8639(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8639");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='HistoryEvent']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8702(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8702");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='MonitoringFilter']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8708(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8708");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EventFilter']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8711(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8711");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AggregateConfiguration']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8807(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8807");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='HistoryEventFieldList']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8384(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8384");
        node.BrowseName = ToQualifiedName("ScalarTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ScalarTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ScalarTestType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8387(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8387");
        node.BrowseName = ToQualifiedName("ArrayTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ArrayTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ArrayTestType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8390(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8390");
        node.BrowseName = ToQualifiedName("CompositeTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CompositeTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='CompositeTestType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8327(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8327");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='BuildInfo']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8843(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8843");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='RedundantServerDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11951(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11951");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EndpointUrlListDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11954(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11954");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='NetworkGroupDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8846(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8846");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SamplingIntervalDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8849(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8849");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ServerDiagnosticsSummaryDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8852(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8852");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ServerStatusDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8855(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8855");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SessionDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8858(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8858");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SessionSecurityDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8861(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8861");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ServiceCounterDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8294(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8294");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='StatusResult']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8864(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8864");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SubscriptionDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8867(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8867");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ModelChangeStructureDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8870(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8870");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SemanticChangeStructureDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8873(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8873");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Range");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='Range']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8876(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8876");
        node.BrowseName = ToQualifiedName("EUInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EUInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EUInformation']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12175(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12175");
        node.BrowseName = ToQualifiedName("ComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ComplexNumberType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12178(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12178");
        node.BrowseName = ToQualifiedName("DoubleComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DoubleComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='DoubleComplexNumberType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12083(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12083");
        node.BrowseName = ToQualifiedName("AxisInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AxisInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AxisInformation']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12086(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12086");
        node.BrowseName = ToQualifiedName("XVType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("XVType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='XVType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8882(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8882");
        node.BrowseName = ToQualifiedName("ProgramDiagnosticDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgramDiagnosticDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ProgramDiagnosticDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8879(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8879");
        node.BrowseName = ToQualifiedName("Annotation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Annotation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='Annotation']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_340(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=340");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=338");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=340");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7692");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_855(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=855");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=853");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=855");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8208");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11957(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11957");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11943");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=11957");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11959");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_11958(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11958");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11944");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=11958");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11962");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_858(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=858");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=856");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=858");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8211");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_861(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=861");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=859");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=861");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8214");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_864(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=864");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=862");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=864");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8217");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_867(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=867");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=865");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=867");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8220");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_870(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=870");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=868");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=870");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8223");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_873(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=873");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=871");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=873");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8226");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_301(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=301");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=299");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=301");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7659");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_876(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=876");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=874");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=876");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8229");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_879(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=879");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=877");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=879");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8232");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_899(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=899");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=897");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasDescription;
            ref.SourceNodeId = ToNodeId("i=899");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8235");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_7617(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7617");
        node.BrowseName = ToQualifiedName("Opc.Ua");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=93");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=72");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Opc.Ua");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
        std::vector<AddReferencesItem> refs;
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasProperty;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7619");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7650");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7656");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8914");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7665");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7662");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7668");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7782");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7698");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7671");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7674");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7677");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7680");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7683");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7728");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7731");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7734");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7737");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7686");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7689");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7695");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7929");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7932");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7935");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7938");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7941");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7944");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7947");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8004");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8067");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8073");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8076");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8172");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7749");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7752");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7755");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7692");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8208");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11959");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=11962");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8211");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8214");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8217");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8220");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8223");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8226");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=7659");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8229");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8232");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8235");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8238");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8241");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12183");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12186");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12091");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=12094");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8247");
            refs.push_back(ref);
        }
        {
            AddReferencesItem ref;
            ref.IsForward = true;
            ref.ReferenceTypeId = ReferenceId::HasComponent;
            ref.SourceNodeId = ToNodeId("i=7617");
            ref.TargetNodeClass = NodeClass::DataType;
            ref.TargetNodeId = ToNodeId("i=8244");
            refs.push_back(ref);
        }
        registry.AddReferences(refs);
    }

    static void create_7619(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7619");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Value = +"http://opcfoundation.org/UA/";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7650(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7650");
        node.BrowseName = ToQualifiedName("Argument");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Argument");
        attrs.Type = ObjectId::String;
        attrs.Value = +"Argument";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7656(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7656");
        node.BrowseName = ToQualifiedName("EnumValueType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValueType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EnumValueType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8914(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8914");
        node.BrowseName = ToQualifiedName("TimeZoneDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TimeZoneDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"TimeZoneDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7665(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7665");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ApplicationDescription";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7662(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7662");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.Type = ObjectId::String;
        attrs.Value = +"UserTokenPolicy";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7668(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7668");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EndpointDescription";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7782(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7782");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.Type = ObjectId::String;
        attrs.Value = +"RegisteredServer";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7698(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7698");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SignedSoftwareCertificate";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7671(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7671");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"UserIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7674(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7674");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AnonymousIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7677(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7677");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"UserNameIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7680(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7680");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"X509IdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7683(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7683");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"IssuedIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7728(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7728");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AddNodesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7731(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7731");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AddReferencesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7734(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7734");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"DeleteNodesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7737(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7737");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"DeleteReferencesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7686(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7686");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EndpointConfiguration";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7689(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7689");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SupportedProfile";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7695(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7695");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SoftwareCertificate";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7929(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7929");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ContentFilterElement";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7932(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7932");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ContentFilter";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7935(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7935");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"FilterOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7938(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7938");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ElementOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7941(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7941");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"LiteralOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7944(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7944");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AttributeOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7947(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7947");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SimpleAttributeOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8004(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8004");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.Type = ObjectId::String;
        attrs.Value = +"HistoryEvent";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8067(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8067");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"MonitoringFilter";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8073(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8073");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EventFilter";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8076(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8076");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AggregateConfiguration";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8172(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8172");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.Type = ObjectId::String;
        attrs.Value = +"HistoryEventFieldList";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7749(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7749");
        node.BrowseName = ToQualifiedName("ScalarTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ScalarTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ScalarTestType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7752(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7752");
        node.BrowseName = ToQualifiedName("ArrayTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ArrayTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ArrayTestType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7755(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7755");
        node.BrowseName = ToQualifiedName("CompositeTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CompositeTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"CompositeTestType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7692(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7692");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ObjectId::String;
        attrs.Value = +"BuildInfo";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8208(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8208");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"RedundantServerDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11959(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11959");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EndpointUrlListDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_11962(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11962");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"NetworkGroupDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8211(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8211");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SamplingIntervalDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8214(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8214");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ServerDiagnosticsSummaryDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8217(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8217");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ServerStatusDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8220(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8220");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SessionDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8223(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8223");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SessionSecurityDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8226(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8226");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ServiceCounterDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_7659(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7659");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.Type = ObjectId::String;
        attrs.Value = +"StatusResult";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8229(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8229");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SubscriptionDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8232(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8232");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ModelChangeStructureDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8235(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8235");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SemanticChangeStructureDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8238(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8238");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Range");
        attrs.Type = ObjectId::String;
        attrs.Value = +"Range";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8241(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8241");
        node.BrowseName = ToQualifiedName("EUInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EUInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EUInformation";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12183(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12183");
        node.BrowseName = ToQualifiedName("ComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ComplexNumberType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12186(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12186");
        node.BrowseName = ToQualifiedName("DoubleComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DoubleComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"DoubleComplexNumberType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12091(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12091");
        node.BrowseName = ToQualifiedName("AxisInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AxisInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AxisInformation";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_12094(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12094");
        node.BrowseName = ToQualifiedName("XVType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("XVType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"XVType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8247(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8247");
        node.BrowseName = ToQualifiedName("ProgramDiagnosticDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgramDiagnosticDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ProgramDiagnosticDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    static void create_8244(OpcUa::NodeManagementServices& registry)
    {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8244");
        node.BrowseName = ToQualifiedName("Annotation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Annotation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"Annotation";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem> {node});
    }

    void CreateAddressSpacePart6(OpcUa::NodeManagementServices& registry)
    {
        create_11436(registry);
        create_2340(registry);
        create_2137(registry);
        create_2138(registry);
        create_2139(registry);
        create_2140(registry);
        create_2141(registry);
        create_2142(registry);
        create_3698(registry);
        create_3699(registry);
        create_3700(registry);
        create_3701(registry);
        create_3702(registry);
        create_3703(registry);
        create_2752(registry);
        create_2753(registry);
        create_3051(registry);
        create_3052(registry);
        create_3053(registry);
        create_3054(registry);
        create_3055(registry);
        create_3056(registry);
        create_3057(registry);
        create_2150(registry);
        create_2151(registry);
        create_2152(registry);
        create_2153(registry);
        create_2154(registry);
        create_2155(registry);
        create_2156(registry);
        create_2157(registry);
        create_2159(registry);
        create_2160(registry);
        create_2161(registry);
        create_2162(registry);
        create_2163(registry);
        create_2164(registry);
        create_2165(registry);
        create_2166(registry);
        create_11697(registry);
        create_11698(registry);
        create_11699(registry);
        create_2171(registry);
        create_2172(registry);
        create_2173(registry);
        create_2174(registry);
        create_2175(registry);
        create_2176(registry);
        create_2177(registry);
        create_8888(registry);
        create_2179(registry);
        create_2180(registry);
        create_2181(registry);
        create_2182(registry);
        create_2183(registry);
        create_2184(registry);
        create_2185(registry);
        create_2186(registry);
        create_2187(registry);
        create_2188(registry);
        create_2189(registry);
        create_2190(registry);
        create_2191(registry);
        create_2998(registry);
        create_2193(registry);
        create_8889(registry);
        create_8890(registry);
        create_8891(registry);
        create_8892(registry);
        create_8893(registry);
        create_8894(registry);
        create_8895(registry);
        create_8896(registry);
        create_8897(registry);
        create_8902(registry);
        create_2196(registry);
        create_2197(registry);
        create_2198(registry);
        create_2199(registry);
        create_2200(registry);
        create_2201(registry);
        create_2202(registry);
        create_2203(registry);
        create_2204(registry);
        create_3050(registry);
        create_2205(registry);
        create_2206(registry);
        create_2207(registry);
        create_2208(registry);
        create_2209(registry);
        create_8900(registry);
        create_11892(registry);
        create_2217(registry);
        create_2218(registry);
        create_2219(registry);
        create_2220(registry);
        create_2221(registry);
        create_2222(registry);
        create_2223(registry);
        create_2224(registry);
        create_2225(registry);
        create_2226(registry);
        create_2227(registry);
        create_2228(registry);
        create_2229(registry);
        create_2230(registry);
        create_2231(registry);
        create_2232(registry);
        create_2233(registry);
        create_2234(registry);
        create_2235(registry);
        create_2236(registry);
        create_2237(registry);
        create_2238(registry);
        create_2239(registry);
        create_2240(registry);
        create_2241(registry);
        create_2242(registry);
        create_2730(registry);
        create_2731(registry);
        create_2243(registry);
        create_2244(registry);
        create_2245(registry);
        create_2246(registry);
        create_2247(registry);
        create_2248(registry);
        create_2249(registry);
        create_2250(registry);
        create_2251(registry);
        create_2252(registry);
        create_3058(registry);
        create_11487(registry);
        create_11488(registry);
        create_11701(registry);
        create_3048(registry);
        create_2253(registry);
        create_2254(registry);
        create_2255(registry);
        create_2256(registry);
        create_2257(registry);
        create_2258(registry);
        create_2259(registry);
        create_2260(registry);
        create_2262(registry);
        create_2263(registry);
        create_2261(registry);
        create_2264(registry);
        create_2265(registry);
        create_2266(registry);
        create_2992(registry);
        create_2993(registry);
        create_2267(registry);
        create_2994(registry);
        create_2268(registry);
        create_2269(registry);
        create_2271(registry);
        create_2272(registry);
        create_2735(registry);
        create_2736(registry);
        create_2737(registry);
        create_3704(registry);
        create_11702(registry);
        create_11703(registry);
        create_11704(registry);
        create_11705(registry);
        create_12165(registry);
        create_12166(registry);
        create_11707(registry);
        create_12167(registry);
        create_12168(registry);
        create_11709(registry);
        create_11710(registry);
        create_11711(registry);
        create_11712(registry);
        create_11713(registry);
        create_11714(registry);
        create_2996(registry);
        create_2997(registry);
        create_2274(registry);
        create_2275(registry);
        create_2276(registry);
        create_2277(registry);
        create_2278(registry);
        create_2279(registry);
        create_3705(registry);
        create_2281(registry);
        create_2282(registry);
        create_2284(registry);
        create_2285(registry);
        create_2286(registry);
        create_2287(registry);
        create_2288(registry);
        create_2289(registry);
        create_2290(registry);
        create_3706(registry);
        create_3707(registry);
        create_3708(registry);
        create_2294(registry);
        create_2295(registry);
        create_2296(registry);
        create_3709(registry);
        create_11312(registry);
        create_11313(registry);
        create_11314(registry);
        create_11715(registry);
        create_11493(registry);
        create_11494(registry);
        create_11737(registry);
        create_2299(registry);
        create_2769(registry);
        create_3720(registry);
        create_2770(registry);
        create_3724(registry);
        create_2755(registry);
        create_2756(registry);
        create_2757(registry);
        create_2758(registry);
        create_2759(registry);
        create_2762(registry);
        create_2763(registry);
        create_2764(registry);
        create_2765(registry);
        create_2766(registry);
        create_11456(registry);
        create_2771(registry);
        create_2772(registry);
        create_3728(registry);
        create_2773(registry);
        create_3732(registry);
        create_2760(registry);
        create_2761(registry);
        create_2767(registry);
        create_2768(registry);
        create_2307(registry);
        create_2308(registry);
        create_2309(registry);
        create_2310(registry);
        create_2312(registry);
        create_2311(registry);
        create_2774(registry);
        create_3754(registry);
        create_2775(registry);
        create_3746(registry);
        create_2776(registry);
        create_3750(registry);
        create_2315(registry);
        create_2777(registry);
        create_2778(registry);
        create_338(registry);
        create_851(registry);
        create_7611(registry);
        create_852(registry);
        create_7612(registry);
        create_853(registry);
        create_11943(registry);
        create_11944(registry);
        create_856(registry);
        create_859(registry);
        create_862(registry);
        create_865(registry);
        create_868(registry);
        create_871(registry);
        create_299(registry);
        create_874(registry);
        create_877(registry);
        create_897(registry);
        create_339(registry);
        create_854(registry);
        create_11949(registry);
        create_11950(registry);
        create_857(registry);
        create_860(registry);
        create_863(registry);
        create_866(registry);
        create_869(registry);
        create_872(registry);
        create_300(registry);
        create_875(registry);
        create_878(registry);
        create_898(registry);
        create_8252(registry);
        create_8254(registry);
        create_8285(registry);
        create_8291(registry);
        create_8918(registry);
        create_8300(registry);
        create_8297(registry);
        create_8303(registry);
        create_8417(registry);
        create_8333(registry);
        create_8306(registry);
        create_8309(registry);
        create_8312(registry);
        create_8315(registry);
        create_8318(registry);
        create_8363(registry);
        create_8366(registry);
        create_8369(registry);
        create_8372(registry);
        create_8321(registry);
        create_8324(registry);
        create_8330(registry);
        create_8564(registry);
        create_8567(registry);
        create_8570(registry);
        create_8573(registry);
        create_8576(registry);
        create_8579(registry);
        create_8582(registry);
        create_8639(registry);
        create_8702(registry);
        create_8708(registry);
        create_8711(registry);
        create_8807(registry);
        create_8384(registry);
        create_8387(registry);
        create_8390(registry);
        create_8327(registry);
        create_8843(registry);
        create_11951(registry);
        create_11954(registry);
        create_8846(registry);
        create_8849(registry);
        create_8852(registry);
        create_8855(registry);
        create_8858(registry);
        create_8861(registry);
        create_8294(registry);
        create_8864(registry);
        create_8867(registry);
        create_8870(registry);
        create_8873(registry);
        create_8876(registry);
        create_12175(registry);
        create_12178(registry);
        create_12083(registry);
        create_12086(registry);
        create_8882(registry);
        create_8879(registry);
        create_340(registry);
        create_855(registry);
        create_11957(registry);
        create_11958(registry);
        create_858(registry);
        create_861(registry);
        create_864(registry);
        create_867(registry);
        create_870(registry);
        create_873(registry);
        create_301(registry);
        create_876(registry);
        create_879(registry);
        create_899(registry);
        create_7617(registry);
        create_7619(registry);
        create_7650(registry);
        create_7656(registry);
        create_8914(registry);
        create_7665(registry);
        create_7662(registry);
        create_7668(registry);
        create_7782(registry);
        create_7698(registry);
        create_7671(registry);
        create_7674(registry);
        create_7677(registry);
        create_7680(registry);
        create_7683(registry);
        create_7728(registry);
        create_7731(registry);
        create_7734(registry);
        create_7737(registry);
        create_7686(registry);
        create_7689(registry);
        create_7695(registry);
        create_7929(registry);
        create_7932(registry);
        create_7935(registry);
        create_7938(registry);
        create_7941(registry);
        create_7944(registry);
        create_7947(registry);
        create_8004(registry);
        create_8067(registry);
        create_8073(registry);
        create_8076(registry);
        create_8172(registry);
        create_7749(registry);
        create_7752(registry);
        create_7755(registry);
        create_7692(registry);
        create_8208(registry);
        create_11959(registry);
        create_11962(registry);
        create_8211(registry);
        create_8214(registry);
        create_8217(registry);
        create_8220(registry);
        create_8223(registry);
        create_8226(registry);
        create_7659(registry);
        create_8229(registry);
        create_8232(registry);
        create_8235(registry);
        create_8238(registry);
        create_8241(registry);
        create_12183(registry);
        create_12186(registry);
        create_12091(registry);
        create_12094(registry);
        create_8247(registry);
        create_8244(registry);

    }
} // namespace OpcUa

